

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


enum UserRole {
  ADMIN
  USER
 }

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String? 
  email         String?   @unique
  emailVerified DateTime?
  verifiedUser  DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  // Relations (optional; keep what you need)
  createdEscrows  Escrow[] @relation("CreatorEscrows")
  buyerEscrows    Escrow[] @relation("BuyerEscrows")
  sellerEscrows   Escrow[] @relation("SellerEscrows")
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime
  @@unique([email, token])
}
model PasswordResetToken {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   email String
   token String @unique 
   expires DateTime 
  @@unique([email, token])
}

model TwoFactorToken {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   email String
   token String @unique 
   expires DateTime 
  @@unique([email, token])
}

model TwoFactorConfirmation {
 id String @id @default(auto()) @map("_id") @db.ObjectId

 userId String @db.ObjectId
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([userId])

}


enum EscrowStatus {
  PENDING
  RELEASED
  CANCELLED
}

enum EscrowRole {
  BUYER
  SELLER
}

enum LogisticsOption {
  NO
  PICKUP
  DELIVERY
}

enum Currency {
  NGN
  USD
  GHS
}


model Escrow {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId

  // Business fields
  role        EscrowRole
  category    String
  logistics   LogisticsOption
  amount      Float
  currency    Currency
  status      EscrowStatus    @default(PENDING)

  // Link generation
  shareToken  String          @unique
  shareUrl    String

  // Creator (required)
  creator     User            @relation("CreatorEscrows", fields: [creatorId], references: [id])
  creatorId   String          @db.ObjectId

  // Optional participants until connected
  buyer       User?           @relation("BuyerEscrows", fields: [buyerId], references: [id])
  buyerId     String?         @db.ObjectId

  seller      User?           @relation("SellerEscrows", fields: [sellerId], references: [id])
  sellerId    String?         @db.ObjectId

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([creatorId])
  @@index([buyerId])
  @@index([sellerId])
}

